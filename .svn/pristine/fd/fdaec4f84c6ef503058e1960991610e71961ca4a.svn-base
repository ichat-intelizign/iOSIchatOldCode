//
//  AuthViewController.swift
//  Rocket.Chat
//im
//  Created by Rafael K. Streit on 7/6/16.
//  Copyright Â© 2016 Rocket.Chat. All rights reserved.
//

import Foundation
import UIKit
import SafariServices
import OnePasswordExtension
import RealmSwift
import semver
final class AuthViewController: BaseViewController {
   internal var connecting = false
   // var serverURL: URL!
    internal let defaultURL = "ichat.intelizi.com"
    var serverURL: URL? {
       return  URL(string: defaultURL, scheme: "https")
    }
    var url: URL? {
       // guard var urlText = textFieldServerURL.text else { return nil }
        return  URL(string: defaultURL, scheme: "https")
    }
    var serverPublicSettings: AuthSettings?
    var temporary2FACode: String?

    var loginServicesToken: NotificationToken?

    @IBOutlet weak var nameLabeli: UILabel!

    @IBOutlet weak var viewFields: UIView! {
        didSet {
            viewFields.layer.cornerRadius = 4
            viewFields.layer.borderColor = UIColor.RCLightGray().cgColor
            viewFields.layer.borderWidth = 0.5
        }
    }

    @IBOutlet weak var onePasswordButton: UIButton! {
        didSet {
            onePasswordButton.isHidden = !OnePasswordExtension.shared().isAppExtensionAvailable()
        }
    }

    @IBOutlet weak var textFieldUsername: UITextField!
    @IBOutlet weak var textFieldPassword: UITextField!
    @IBOutlet weak var visibleViewBottomConstraint: NSLayoutConstraint!

    @IBOutlet weak var buttonAuthenticateGoogle: UIButton! {
        didSet {
            buttonAuthenticateGoogle.layer.cornerRadius = 3
        }
    }
    @IBOutlet weak var buttonSignIn: UIButton!{
        didSet {
            buttonSignIn.layer.cornerRadius = 5
            buttonSignIn.layer.shadowColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.25).cgColor
            buttonSignIn.layer.shadowOffset = CGSize(width: 0.0, height: 2.0)
            buttonSignIn.layer.shadowOpacity = 1.0
            buttonSignIn.layer.shadowRadius = 0.0
            buttonSignIn.layer.masksToBounds = false
            buttonSignIn.layer.cornerRadius = 4.0
        }
    }
    @IBOutlet weak var backgroundView: UIView!
    @IBOutlet weak var imgBack: UIImageView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    
    @IBOutlet weak var contentViewMain: UIView!
    
    @IBOutlet weak var  labelLine: UILabel!
    @IBOutlet weak var  labelLine2: UILabel!
    @IBOutlet var buttonRegister: UIButton!

    @IBOutlet weak var imgIcon: UIImageView!
    @IBOutlet weak var authButtonsStackView: UIStackView!
    var customAuthButtons = [String: UIButton]()

    deinit {
        loginServicesToken?.invalidate()
        NotificationCenter.default.removeObserver(self)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = ""
        let gradientLayer = CAGradientLayer()
        gradientLayer.frame = view.bounds
        gradientLayer.colors = [UIColor.white.cgColor, UIColor.white.cgColor, UIColor(red: 64/255.0, green: 64/255.0, blue: 64/255.0, alpha: 1.0).cgColor, UIColor(red: 64/255.0, green: 64/255.0, blue: 64/255.0, alpha: 1.0).cgColor]
        gradientLayer.locations = [NSNumber(value: 0.0), NSNumber(value: 0.6), NSNumber(value: 0.4), NSNumber(value: 1.0)]
       
        self.backgroundView.layer.addSublayer(gradientLayer)

         self.backgroundView.bringSubview(toFront: nameLabeli)

        self.backgroundView.bringSubview(toFront: contentViewMain)
        self.backgroundView.bringSubview(toFront: imgBack)
        self.backgroundView.bringSubview(toFront: textFieldUsername)
        self.backgroundView.bringSubview(toFront: textFieldPassword)
        self.backgroundView.bringSubview(toFront: buttonSignIn)
        self.backgroundView.bringSubview(toFront: labelLine)
        self.backgroundView.bringSubview(toFront: labelLine2)
        self.backgroundView.bringSubview(toFront: imgIcon)
       // self.updateAuthenticationMethods()
        SocketManager.sharedInstance.socket?.disconnect()
        DatabaseManager.cleanInvalidDatabases()
        connect()
        if let nav = navigationController as? BaseNavigationController {
            nav.setTransparentTheme()
        }
    }
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        setupLoginServices()
//
//        NotificationCenter.default.addObserver(
//            self,
//            selector: #selector(keyboardWillShow(_:)),
//            name: NSNotification.Name.UIKeyboardWillShow,
//            object: nil
//        )
//
//        NotificationCenter.default.addObserver(
//            self,
//            selector: #selector(keyboardWillHide(_:)),
//            name: NSNotification.Name.UIKeyboardWillHide,
//            object: nil
//        )
//
//        if !connecting {
//            textFieldUsername.becomeFirstResponder()
//        }
    }
    
    
    @IBAction func signInAction(_ sender: Any) {
        authenticateWithUsernameOrEmail()
        
    }
    

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "TwoFactor" {
            if let controller = segue.destination as? TwoFactorAuthenticationViewController {
                controller.username = textFieldUsername.text ?? ""
                controller.password = textFieldPassword.text ?? ""
                controller.token = temporary2FACode ?? ""
            }
        }
    }

    // MARK: Keyboard Handlers
    override func keyboardWillShow(_ notification: Notification) {
        if let keyboardSize = ((notification as NSNotification).userInfo?[UIKeyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue {
            visibleViewBottomConstraint.constant = keyboardSize.height
        }
    }

    override func keyboardWillHide(_ notification: Notification) {
        visibleViewBottomConstraint.constant = 0
    }

    // MARK: Authentication methods
    fileprivate func updateAuthenticationMethods() {
        guard let settings = self.serverPublicSettings else { return }
        self.buttonAuthenticateGoogle.isHidden = !settings.isGoogleAuthenticationEnabled
    }

    internal func handleAuthenticationResponse(_ response: SocketResponse) {
        if response.isError() {
            stopLoading()

            if let error = response.result["error"].dictionary {
                // User is using 2FA
                if error["error"]?.string == "totp-required" {
                    performSegue(withIdentifier: "TwoFactor", sender: nil)
                    return
                }

                let alert = UIAlertController(
                    title: localized("error.socket.default_error_title"),
                    message: error["message"]?.string ?? localized("error.socket.default_error_message"),
                    preferredStyle: .alert
                )

                alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                present(alert, animated: true, completion: nil)
            }

            return
        }

        API.shared.fetch(MeRequest()) { [weak self] result in
            self?.stopLoading()
            if let user = result?.user {
                if user.username != nil {

                    DispatchQueue.main.async {
                        self?.dismiss(animated: true, completion: nil)

                        let storyboardChat = UIStoryboard(name: "Main", bundle: Bundle.main)
                        let controller = storyboardChat.instantiateInitialViewController()
                        let application = UIApplication.shared

                        if let window = application.windows.first {
                            window.rootViewController = controller
                        }
                    }
                } else {
                    DispatchQueue.main.async {
                        self?.performSegue(withIdentifier: "RequestUsername", sender: nil)
                    }
                }
            }
        }
    }

    // MARK: Loaders
    func startLoading() {
        textFieldUsername.alpha = 0.5
        textFieldPassword.alpha = 0.5
        connecting = true
    //    activityIndicator.startAnimating()
      //  textFieldUsername.resignFirstResponder()
      //  textFieldPassword.resignFirstResponder()
       // buttonAuthenticateGoogle.isEnabled = false
    }

    func stopLoading() {
        DispatchQueue.main.async(execute: {
            self.textFieldUsername.alpha = 1
            self.textFieldPassword.alpha = 1
           // self.activityIndicator.stopAnimating()
            //self.buttonAuthenticateGoogle.isEnabled = true
        })

        connecting = false
    }

    // MARK: IBAction
    func authenticateWithUsernameOrEmail() {
        let email = textFieldUsername.text ?? ""
        let password = textFieldPassword.text ?? ""

        startLoading()

        if serverPublicSettings?.isLDAPAuthenticationEnabled ?? false {
            let params = [
                "ldap": true,
                "username": email,
                "ldapPass": password,
                "ldapOptions": []
            ] as [String: Any]
        AuthManager.auth(params: params, completion: self.handleAuthenticationResponse)
        } else {
           AuthManager.auth(email, password: password, completion: self.handleAuthenticationResponse)
        }
    }
      // MARK: alert
    func alertInvalidURL() {
        let alert = UIAlertController(
            title: localized("alert.connection.invalid_url.title"),
            message: localized("alert.connection.invalid_url.message"),
            preferredStyle: .alert
        )
        alert.addAction(UIAlertAction(title: localized("global.ok"), style: .default, handler: nil))
        present(alert, animated: true, completion: nil)
    }

      // MARK: Connect to server
    func connect() {
        guard let url = url else { return alertInvalidURL() }
        guard let socketURL = url.socketURL() else { return alertInvalidURL() }
    // Check if server already exists and connect to that instead
       if let servers = DatabaseManager.servers {
          let sameServerIndex = servers.index(where: {
         if let stringServerUrl = $0[ServerPersistKeys.serverURL],
         let serverUrl = URL(string: stringServerUrl) {
           return serverUrl == socketURL
         } else {
           return false
        }
    })
    if let sameServerIndex = sameServerIndex {
           MainChatViewController.shared?.changeSelectedServer(index: sameServerIndex)
   // textFieldServerURL.resignFirstResponder()
    return
    }
    }
          connecting = true
  //  textFieldServerURL.alpha = 0.5
   // activityIndicator.startAnimating()
  //  textFieldServerURL.resignFirstResponder()
       API.shared.host = url
      validate { [weak self] (_, error) in
      guard !error else {
        DispatchQueue.main.async {
       self?.stopConnecting()
       self?.alertInvalidURL()
       }
    return
    }
    SocketManager.connect(socketURL) { (_, connected) in
    if !connected {
        self?.stopConnecting()
        self?.alert(title: localized("alert.connection.socket_error.title"),
        message: localized("alert.connection.socket_error.message"))
    return
    }
       let index = DatabaseManager.createNewDatabaseInstance(serverURL: socketURL.absoluteString)
       DatabaseManager.changeDatabaseInstance(index: index)
       AuthSettingsManager.updatePublicSettings(nil) { (settings) in
      self?.serverPublicSettings = settings
    if connected {
   // self?.performSegue(withIdentifier: "Auth", sender: nil)
      //  self?.authenticateWithUsernameOrEmail()
    }
    self?.stopConnecting()
    }
    }
    }
    }
    
    func stopConnecting() {
        connecting = false
       // textFieldServerURL.alpha = 1
        //activityIndicator.stopAnimating()
    }
    func validate(completion: @escaping RequestCompletion) {
        API.shared.fetch(InfoRequest()) { result in
            guard let version = result?.version else {
                return completion(nil, true)
            }
            if let minVersion = Bundle.main.object(forInfoDictionaryKey: "RC_MIN_SERVER_VERSION") as? String {
                if Semver.lt(version, minVersion) {
                    let alert = UIAlertController(
                        title: localized("alert.connection.invalid_version.title"),
                        message: String(format: localized("alert.connection.invalid_version.message"), version, minVersion),
                        preferredStyle: .alert
                    )
                    alert.addAction(UIAlertAction(title: localized("global.ok"), style: .default, handler: nil))
                    self.present(alert, animated: true, completion: nil)
                }
            }
            completion(result?.raw, false)
        }
    }

    @IBAction func buttonAuthenticateGoogleDidPressed(_ sender: Any) {
        authenticateWithGoogle()
    }

    @IBAction func buttonTermsDidPressed(_ sender: Any) {
        var components = URLComponents()
        components.scheme = "https"
        components.host = self.serverURL?.host

        if var newURL = components.url {
            newURL = newURL.appendingPathComponent("terms-of-service")

            let controller = SFSafariViewController(url: newURL)
            present(controller, animated: true, completion: nil)
        }
    }

    @IBAction func buttonPolicyDidPressed(_ sender: Any) {
        var components = URLComponents()
        components.scheme = "https"
        components.host = self.serverURL?.host

        if var newURL = components.url {
            newURL = newURL.appendingPathComponent("privacy-policy")

            let controller = SFSafariViewController(url: newURL)
            present(controller, animated: true, completion: nil)
        }
    }

    @IBAction func buttonOnePasswordDidPressed(_ sender: Any) {
        let siteURL = serverPublicSettings?.siteURL ?? ""
        OnePasswordExtension.shared().findLogin(forURLString: siteURL, for: self, sender: sender) { [weak self] (login, _) in
            if login == nil {
                return
            }

            self?.textFieldUsername.text = login?[AppExtensionUsernameKey] as? String
            self?.textFieldPassword.text = login?[AppExtensionPasswordKey] as? String
            self?.temporary2FACode = login?[AppExtensionTOTPKey] as? String
            self?.authenticateWithUsernameOrEmail()
        }
    }
}

extension AuthViewController: UITextFieldDelegate {

//    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
//        return !connecting
//    }

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if connecting {
            return false
        }

        if textField == textFieldUsername {
            textFieldPassword.becomeFirstResponder()
        }

        if textField == textFieldPassword {
         //   connect()
            authenticateWithUsernameOrEmail()
        }

        return true
    }
}

// MARK: Login Services

extension AuthViewController {
    func setupLoginServices() {
        self.loginServicesToken?.invalidate()

        self.loginServicesToken = LoginServiceManager.observe { [weak self] changes in
            self?.updateLoginServices(changes: changes)
        }

        LoginServiceManager.subscribe()
    }

    @objc func loginServiceButtonDidPress(_ button: UIButton) {
        guard let service = customAuthButtons.filter({ $0.value == button }).keys.first,
              let realm = Realm.shared,
              let loginService = LoginService.find(service: service, realm: realm)
        else {
            return
        }

        OAuthManager.authorize(loginService: loginService, at: serverURL!, viewController: self,
                               success: { [weak self] credentials in

            guard let strongSelf = self else { return }
            AuthManager.auth(credentials: credentials, completion: strongSelf.handleAuthenticationResponse)

        }, failure: { [weak self] in

            self?.alert(title: localized("alert.login_service_error.title"),
                        message: localized("alert.login_service_error.title"))

        })
    }

    func updateLoginServices(changes: RealmCollectionChange<Results<LoginService>>) {
        switch changes {
        case .update(let res, let deletions, let insertions, let modifications):
            insertions.map { res[$0] }.forEach {
                guard $0.custom, !($0.serverURL?.isEmpty ?? true) else { return }

                let button = UIButton()
                button.layer.cornerRadius = 3
                button.setTitle($0.buttonLabelText ?? "", for: .normal)
                button.titleLabel?.font = UIFont.boldSystemFont(ofSize: 17.0)
                button.setTitleColor(UIColor(hex: $0.buttonLabelColor), for: .normal)
                button.backgroundColor = UIColor(hex: $0.buttonColor)
                button.addTarget(self, action: #selector(loginServiceButtonDidPress(_:)), for: .touchUpInside)

                authButtonsStackView.addArrangedSubview(button)

                customAuthButtons[$0.service ?? ""] = button
            }

            modifications.map { res[$0] }.forEach {
                guard $0.custom,
                      let identifier = $0.identifier,
                      let button = self.customAuthButtons[identifier]
                else {
                    return
                }

                button.setTitle($0.buttonLabelText ?? "", for: .normal)
                button.setTitleColor(UIColor(hex: $0.buttonLabelColor), for: .normal)
                button.backgroundColor = UIColor(hex: $0.buttonColor)
            }

            deletions.map { res[$0] }.forEach {
                guard $0.custom,
                      let identifier = $0.identifier,
                      let button = self.customAuthButtons[identifier]
                else {
                    return
                }

                authButtonsStackView.removeArrangedSubview(button)
                customAuthButtons.removeValue(forKey: identifier)
            }
        default:
            break
        }
    }
}


